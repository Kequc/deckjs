// Generated by CoffeeScript 1.9.3
(function() {
  var Deck,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Deck = (function() {
    Deck.prototype.SUITS = ['spades', 'hearts', 'diamonds', 'clubs'];

    Deck.prototype.RANKS = ['ace', 'king', 'queen', 'jack', '10', '9', '8', '7', '6', '5', '4', '3', '2'];

    function Deck(opt) {
      var base, base1;
      this.opt = opt != null ? opt : {};
      this._random = bind(this._random, this);
      this.draw = bind(this.draw, this);
      this.pick = bind(this.pick, this);
      this.shuffle = bind(this.shuffle, this);
      this.last = bind(this.last, this);
      this.count = bind(this.count, this);
      if ((base = this.opt).extras == null) {
        base.extras = [];
      }
      if ((base1 = this.opt).count == null) {
        base1.count = 1;
      }
      if (this.opt.count < 1) {
        this.opt.count = 1;
      }
      this.shuffle();
    }

    Deck.prototype.count = function() {
      return this.cards.length;
    };

    Deck.prototype.last = function() {
      return this.discard[this.discard.length - 1] || null;
    };

    Deck.prototype.shuffle = function() {
      var extra, i, j, k, l, len, len1, len2, m, rank, ref, ref1, ref2, ref3, suit;
      this.cards = [];
      this.discard = [];
      for (i = j = 1, ref = this.opt.count; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        ref1 = this.SUITS;
        for (k = 0, len = ref1.length; k < len; k++) {
          suit = ref1[k];
          ref2 = this.RANKS;
          for (l = 0, len1 = ref2.length; l < len1; l++) {
            rank = ref2[l];
            this.cards.push({
              suit: suit,
              rank: rank
            });
          }
        }
        ref3 = this.opt.extras;
        for (m = 0, len2 = ref3.length; m < len2; m++) {
          extra = ref3[m];
          if (!(extra.limit && i > extra.limit)) {
            this.cards.push({
              suit: extra.suit,
              rank: extra.rank
            });
          }
        }
      }
      return true;
    };

    Deck.prototype.pick = function() {
      var i;
      i = this._random();
      return this.cards[i] || null;
    };

    Deck.prototype.draw = function() {
      var card, i;
      i = this._random();
      card = null;
      if (i > -1) {
        card = this.cards.splice(i, 1)[0] || null;
      }
      if (card) {
        this.discard.push(card);
      }
      return card;
    };

    Deck.prototype._random = function() {
      var count;
      count = this.count();
      if (count > 0) {
        return Math.floor(Math.random() * count);
      } else {
        return -1;
      }
    };

    return Deck;

  })();

  if (typeof module === "object" && typeof module.exports === "object") {
    module.exports = Deck;
  } else {
    window.Deck = Deck;
  }

}).call(this);
